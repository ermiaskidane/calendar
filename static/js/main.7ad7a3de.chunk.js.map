{"version":3,"sources":["store/constants/listConstants.js","components/home.js","store/actions/listActions.js","App.js","store.js","store/reducers/listReducers.js","reportWebVitals.js","index.js"],"names":["LIST_EVENT_REQUEST","LIST_EVENT_SUCCESS","LIST_EVENT_FAIL","Home","history","useState","Date","date","setDate","todo","setToDo","lists","setlists","dispatch","useDispatch","listEvent","useSelector","state","listInfo","loading","error","useEffect","console","log","className","onChange","value","style","margin","toString","onSubmit","e","preventDefault","dateCh","a","type","data","payload","localStorage","setItem","JSON","stringify","response","message","listEv","target","placeholder","required","textTransform","length","map","event","Fragment","paddingLeft","App","path","component","reducer","combineReducers","action","initialState","getItem","parse","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oPAAaA,G,MAAqB,sBACrBC,EAAqB,qBACrBC,EAAkB,kB,qBCqEhBC,EAhEF,SAAC,GAAc,EAAbC,QAAc,IAC3B,EAA0BC,mBAAS,IAAIC,MAAvC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAA0BH,mBAAS,IAAnC,mBAAQI,EAAR,KAAcC,EAAd,KACA,EAA2BL,mBAAS,IAApC,mBAAQM,EAAR,KAAeC,EAAf,KAEMC,EAAWC,cAEXC,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMF,aACvBG,GAAaH,EAA7BI,QAA6BJ,EAApBK,MAAoBL,EAAbG,UAExBG,qBAAU,WACLH,GACDN,EAAS,CAACM,MAGX,CAACA,IAiBJ,OADFI,QAAQC,IAAIZ,GAER,sBAAKa,UAAU,MAAf,UAEE,0CACA,cAAC,IAAD,CAAUC,SAnBG,SAAAlB,GACfC,EAAQD,IAkBwBmB,MAAOnB,IAErC,mBAAGoB,MAAO,CAACC,OAAQ,SAAnB,SAA8BrB,EAAKsB,aAEnC,uBAAMC,SAnBY,SAACC,GACrBA,EAAEC,iBACF,IAAIC,EAAS1B,EAAKsB,WAClBhB,ECtBkB,SAACJ,EAAMwB,GAAP,8CAAkB,WAAOpB,GAAP,eAAAqB,EAAA,sDACpC,IACIrB,EAAS,CACLsB,KAAMnC,IAGJoC,EAAO,CAAE3B,OAAMwB,UACrBX,QAAQC,IAAIa,GAGZvB,EAAS,CACLsB,KAAMlC,EACNoC,QAASD,IAGbE,aAAaC,QAAQ,eAAgBC,KAAKC,UAAUL,IACtD,MAAOhB,GACLP,EAAS,CACLsB,KAAMjC,EACNmC,QACIjB,EAAMsB,UAAYtB,EAAMsB,SAASN,KAAKO,QAChCvB,EAAMsB,SAASN,KAAKO,QACpBvB,EAAMuB,UAtBY,2CAAlB,sDDsBTC,CAAOnC,EAAMwB,KAgBpB,UACE,uBAAOE,KAAK,OAAOV,SAAU,SAACM,GAAD,OAAOrB,EAAQqB,EAAEc,OAAOnB,QAAQoB,YAAY,iBAAiBC,UAAQ,IAClG,wBAAQZ,KAAK,SAAb,uBAIF,oBAAIR,MAAO,CAACqB,cAAe,cAA3B,8BACiB,IAAjBrC,EAAMsC,OACL,6BACGtC,EAAMuC,KAAI,SAACC,GAAD,OACV,cAAC,IAAMC,SAAP,UACE,mCAAMD,EAAM1C,KAAZ,IAAkB,sBAAMkB,MAAO,CAAC0B,YAAa,QAA3B,SAAqCF,EAAMlB,aAD1CkB,EAAM1C,WAM/B,sD,eE9CS6C,EAZH,WACV,OACE,mCACA,cAAC,IAAD,UACI,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAKC,UAAWrD,W,wBCFhCsD,EAAUC,0BAAgB,CAC5B3C,UCH4B,WAAyB,IAAxBE,EAAuB,uDAAf,GAAI0C,EAAW,uCACpD,OAAOA,EAAOxB,MACV,KAAKnC,EACD,MAAO,CAAEmB,SAAS,GACtB,KAAKlB,EACD,MAAO,CAAEkB,SAAS,EAAOD,SAAUyC,EAAOtB,SAC9C,KAAKnC,EACD,MAAO,CAAEiB,SAAS,EAAOC,MAAOuC,EAAOtB,SAC3C,QACI,OAAOpB,MDCb2C,EAAe,CACjB7C,UAAW,CAAEG,SALWoB,aAAauB,QAAQ,YAC7CrB,KAAKsB,MAAMxB,aAAauB,QAAQ,aAAe,OAO7CE,EAAa,CAACC,KAILC,EAFDC,sBAAYT,EAASG,EAAcO,8BAAoBC,kBAAe,WAAf,EAAmBL,KEVzEM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAD,CAAUd,MAAOA,EAAjB,SACA,cAAC,EAAD,MAEAe,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7ad7a3de.chunk.js","sourcesContent":["export const LIST_EVENT_REQUEST = \"LIST_EVENT_REQUEST\"\r\nexport const LIST_EVENT_SUCCESS = \"LIST_EVENT_SUCCESS\"\r\nexport const LIST_EVENT_FAIL = \"LIST_EVENT_FAIL\"","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Calendar from \"react-calendar\"\r\nimport { listEv } from \"../store/actions/listActions\";\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport '../App.css';\r\n\r\nconst Home = ({history}) => {\r\n  const [ date, setDate ] = useState(new Date());\r\n  const [ todo, setToDo ] = useState(\"\")\r\n  const [ lists, setlists] = useState([])\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const listEvent = useSelector((state) => state.listEvent);\r\n  const { loading, error, listInfo } = listEvent;\r\n\r\n  useEffect(() => {\r\n    if(listInfo) {\r\n      setlists([listInfo])\r\n    }\r\n\r\n  }, [listInfo])\r\n\r\n  const onChange = date => {\r\n    setDate(date)\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    let dateCh = date.toString()\r\n    dispatch(listEv(todo, dateCh))\r\n    // const data = {dateCh, todo}\r\n    // console.log(data)\r\n   \r\n    // setlists([data])\r\n}\r\n\r\nconsole.log(lists)\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      <h1>Calendar</h1>\r\n      <Calendar onChange={onChange} value={date} />\r\n\r\n      <p style={{margin: \"5px 0\"}}>{date.toString()}</p>\r\n\r\n      <form onSubmit={submitHandler}>\r\n        <input type=\"text\" onChange={(e) => setToDo(e.target.value)} placeholder=\"enter an event\" required/>\r\n        <button type=\"submit\" >button</button>\r\n      </form>\r\n\r\n    \r\n      <h2 style={{textTransform: \"capitalize\" }}>Lists of Events </h2>\r\n     {lists.length !== 0 ? (\r\n       <ul>\r\n         {lists.map((event) => (\r\n          <React.Fragment key={event.todo}>\r\n            <li>*{event.todo} <span style={{paddingLeft: \"10px\"}}>{event.dateCh}</span></li>\r\n          </React.Fragment>\r\n         ))}\r\n       </ul>\r\n     ): (\r\n      <div> no Lists todos</div>\r\n     )}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Home;\r\n","\r\n\r\nimport axios from \"axios\"\r\nimport {\r\n    LIST_EVENT_FAIL, \r\n    LIST_EVENT_REQUEST, \r\n    LIST_EVENT_SUCCESS, \r\n} from \"../constants/listConstants\"\r\n\r\nexport const listEv = (todo, dateCh) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: LIST_EVENT_REQUEST,\r\n        })\r\n\r\n        const data = { todo, dateCh}\r\n        console.log(data)\r\n        // const { data } = await axios.post(\"/api/users/login\", { email, password}, config)\r\n\r\n        dispatch({\r\n            type: LIST_EVENT_SUCCESS,\r\n            payload: data,\r\n        }) \r\n \r\n        localStorage.setItem(\"listofevents\", JSON.stringify(data))\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LIST_EVENT_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        })\r\n    }\r\n}","import React, { useState } from \"react\";\nimport Home from \"./components/home\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport './App.css';\n\nconst App = () => {\n  return (\n    <>\n    <Router>\n        <Switch >\n          <Route path=\"/\"  component={Home}/>\n        </Switch>\n    </Router>\n    </>\n  )\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\n\r\nimport {  \r\n    listEventReducer, \r\n} from \"./store/reducers/listReducers\"\r\n\r\nconst reducer = combineReducers({\r\n    listEvent: listEventReducer, \r\n})\r\n\r\nconst listInfoFromStorage = localStorage.getItem(\"listInfo\") ? \r\n    JSON.parse(localStorage.getItem(\"listInfo\")) : null\r\n\r\n\r\nconst initialState = {\r\n    listEvent: { listInfo: listInfoFromStorage }\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store\r\n","import {\r\n    LIST_EVENT_FAIL, \r\n    LIST_EVENT_REQUEST, \r\n    LIST_EVENT_SUCCESS,\r\n} from \"../constants/listConstants\" \r\n \r\nexport const listEventReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case LIST_EVENT_REQUEST:\r\n            return { loading: true } \r\n        case LIST_EVENT_SUCCESS:\r\n            return { loading: false, listInfo: action.payload }\r\n        case LIST_EVENT_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from \"./store\"\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n  <App />\r\n</Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}